define(function(){function k(a){_.forEach(a,function(a){a.close()});for(var c in a)a.hasOwnProperty(c)&&delete a[c]}var g;return React.createClass({displayName:"Map",getInitialState:function(){return{markers:[],infoW:{}}},massTaskMarker:function(a){_.forEach(a,function(a){void 0===a.marker&&void 0!==a.location&&(a.marker=new google.maps.Marker({title:a.address.address,map:pager.console.map,icon:"/icons/default_marker.png",position:new google.maps.LatLng(a.location.lat,a.location.lng)}),google.maps.event.addListener(a.marker,
"click",function(){var b=$('[data-task="'+a._id+'"]'),d=$(document.body);b.length&&b.is(":visible")&&d.animate({scrollTop:d.scrollTop()+b.offset().top-d.offset().top-10});this.props.setTaskFocus(a._id)}.bind(this)))},this);return a},selectedTaskClick:function(a){function c(){b[a._id].close();delete b[a._id];this.setState({infoW:b})}var b=this.state.infoW,d,e;if(b[a._id])return c.call(this);d=$('<div class="consoleInfoWindow">');e=$('[data-task="'+a.task._id+'"]');e.length&&e.is(":visible")?d.append("<p>"+
a.task.address.address+"</p>"):d.append(React.renderComponentToString(g({attrs:a.task.attrs})));d.append($("<p>").append($('<a title="Ver todos"><i class="fi-arrow-left"></i></a>').click(function(){this.props.setTaskFocus(a._id);c.call(this)}.bind(this))));b[a._id]=new google.maps.InfoWindow({content:d[0]});b[a._id].open(pager.console.map,a.marker);this.setState({infoW:b});google.maps.event.addListener(b[a._id],"closeclick",function(){var b=this.state.infoW;delete b[a._id];this.setState({infoW:b})}.bind(this))},
filterTasks:function(a){var c=[],b=this.state.markers;a.mapState!==pager.constant.console.map.ROUTER_PROJECTION&&a.queries.forEach(function(d){d.tasks.forEach(function(e){if(e.location){var h={_id:e._id},d=_.findIndex(b,h),f=b[d];h.location=e.location;h.address=e.address;h.task=e;f&&f.marker&&(a.mapState===pager.constant.console.map.AVAILABLE_TASKS&&!f.hasSelectedMarker||a.mapState===pager.constant.console.map.SELECTED_TASK&&f.hasSelectedMarker&&f._id===a.selectedTask?h.marker=f.marker:(f.marker.setMap(null),
delete f.marker));c.push(h);0<=d&&b.splice(d,1)}}.bind(this))}.bind(this));b.forEach(function(a){a.marker&&a.marker.setMap(null)});return c},updateMapView:function(a){g=g||pager.components.AttrTable;a=a||this.props;var c=this.state.infoW,b,d=this,e;console.log("update map view");switch(a.mapState){case pager.constant.console.map.AVAILABLE_TASKS:b=this.filterTasks(a);b=this.massTaskMarker(b);break;case pager.constant.console.map.SELECTED_TASK:b=this.filterTasks(a);if(e=_.find(b,{_id:a.selectedTask}))e.hasSelectedMarker=
!0,e.marker||(a=new google.maps.LatLng(e.location.lat,e.location.lng),e.marker=new google.maps.Marker({title:e.address.address,map:pager.console.map,icon:"/icons/selected_marker.png",position:a}),pager.console.map.panTo(a),k(c),this.selectedTaskClick(e),google.maps.event.addListener(e.marker,"click",function(){this.selectedTaskClick(e)}.bind(this)));break;case pager.constant.console.map.ROUTER_PROJECTION:b=this.filterTasks(a),k(c),b=a.routerWorker.wayPoints.map(function(a){a.marker=new google.maps.Marker({map:pager.console.map,
icon:"/icons/fixed_marker.png",position:new google.maps.LatLng(a.location.lat,a.location.lng)});google.maps.event.addListener(a.marker,"click",function(){c[a.id]?(c[a.id].close(),delete c[a.id],d.setState({infoW:c})):(c[a.id]=new google.maps.InfoWindow({content:$('<div class="consoleInfoWindow">').append(React.renderComponentToString(g({attrs:a.attrs})))[0]}),c[a.id].open(pager.console.map,a.marker),d.setState({infoW:c}),google.maps.event.addListener(c[a.id],"closeclick",function(){var b=d.state.infoW;
delete b[a.id];d.setState({infoW:b})}))});return a})}this.setState({markers:b,infoW:c})},componentDidMount:function(){var a={zoom:8,center:new google.maps.LatLng(-22.848658,-43.300933),zoomControl:!1,panControl:!1,scaleControl:!1,streetViewControl:!0,streetViewControlOptions:{position:google.maps.ControlPosition.RIGHT_BOTTOM}},c=this,b=function(a){if(c.isMounted()){var b=$("body");a=$("#Console");var b=b.scrollTop(),g=a.position().top;a={top:Math.max(0,g-b),width:a.width(),height:c.props.height+Math.min(b,
g)};$(c.getDOMNode()).css(a)}else $(window).off("scroll resize",d)},d=_.throttle(b,100);$(window).on("scroll resize",d);b();pager.console=pager.console||{};pager.console.map=new google.maps.Map($("<div>").appendTo(this.getDOMNode())[0],a);setTimeout(function(){this.updateMapView()}.bind(this),1E3)},componentWillReceiveProps:function(a){this.updateMapView(a)},render:function(){return React.DOM.div({id:"ConsoleMainMap"})}})});
